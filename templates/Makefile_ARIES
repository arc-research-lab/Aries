FUNC:={{func}}
MLIR:=aries
KERNEL_NAME:=kernel_${FUNC}
PROJECT_PATH=./project
PROJECT_AIE_PATH=${PROJECT_PATH}/aie
PROJECT_PL_PATH=${PROJECT_PATH}/kernel
PROJECT_Host_PATH=${PROJECT_PATH}/host

ColNum = {{placement[0]}}
RowNum = {{placement[1]}}
ColOffset = {{placement[2]}} 
RowOffset = {{placement[3]}}
ColGap = {{placement[4]}}
FirstCol = {{placement[5]}}
NumShim = {{placement[6]}}
MidLine = {{placement[7]}}
ChalIn = {{placement[8]}}
ChalOut = {{placement[9]}}
CoreAlgo = {{placeAlgo[0]}}
EnableIOCons = "{{placeAlgo[1]}}"
EN_Link = "{{linkFile}}"
AIEVector = {{aieVector}}
AIEUnroll = {{aieUnroll}}
AIEUnrollOpt = {{aieUnrollOpt}}
{% for i in range(dim) -%}
{% set paraSize = parallel[i] -%}
{% set l2Size = l2buffer[i] -%}
L1_{{i}} = {{paraSize}}
L2_{{i}} = {{l2Size}}
{% endfor -%}
L1_Tiling = {% for i in range(dim) -%}${L1_{{i}}}{% if not loop.last %},{% endif %}{% endfor %}
L2_Tiling = {% for i in range(dim) -%}${L2_{{i}}}{% if not loop.last %},{% endif %}{% endfor %}
EN_Tiling = "true"
{% for i in range(numBuf) -%}
{% set sel = bufSel[i] -%}
BUFF_{{i}} = {{sel}}
{% endfor -%}
# 1:BRAM, 0:URAM
buf_sel = {% for i in range(numBuf) -%}${BUFF_{{i}}}{% if not loop.last %},{% endif %}{% endfor %}
PLIOWidth = {{ioWidth}}
AXIWidth = {{axiWidth}}
EN_PL = "{{en_pl}}"
EN_AIE2 = "{{en_aie2}}"
EN_SERIAL = "true"
ifeq ($(EN_AIE2), "true")
	IOType=AIE2_GMIO
else ifeq ($(EN_PL), "true")
	IOType=PLIO
else
	IOType=GMIO
endif

all: pass translate copyfile printcommand

printcommand:
	@echo "PLIOWidth=${PLIOWidth}, AXIWidth=${AXIWidth}, ColNum=${ColNum}, RowNum=${RowNum}, ColOffset=${ColOffset}, RowOffset=${RowOffset}, ColGap=${ColGap}, CoreAlgo=${CoreAlgo}, FirstCol=${FirstCol}, NumShim=${NumShim}, MidLine=${MidLine}, ChalIn=${ChalIn}, ChalOut=${ChalOut}, EnableIOCons=${EnableIOCons}, EN_Link=${EN_Link}, l1-tile-sizes=${L1_Tiling}, l2-tile-sizes=${L2_Tiling}, l3-tile-sizes=${L3_Tiling}, buf_sel=${buf_sel}, EN_PL=${EN_PL}, EN_AIE2=${EN_AIE2}, EN_SERIAL=${EN_SERIAL}, IOType=${IOType}" >${PROJECT_PATH}/command

ARIES_OPTIONS=  tile-func-name=${FUNC}
ARIES_OPTIONS+= l1-tile-sizes=${L1_Tiling} l2-tile-sizes=${L2_Tiling} en-newtiling=${EN_Tiling}
ARIES_OPTIONS+= port-type=${IOType}
ARIES_OPTIONS+= plio-width=${PLIOWidth}
ARIES_OPTIONS+= en-pl=${EN_PL} en-aie2=${EN_AIE2}
ARIES_OPTIONS+= en-link=${EN_Link}
ARIES_OPTIONS+= col-num=${ColNum} row-num=${RowNum} col-offset=${ColOffset} row-offset=${RowOffset} core-gap=${ColGap} core-algo=${CoreAlgo}
ARIES_OPTIONS+= first-col=${FirstCol} num-shim=${NumShim} mid-line=${MidLine} chal-in=${ChalIn} chal-out=${ChalOut} iocons=${EnableIOCons}
ARIES_OPTIONS+= buf-sels=${buf_sel}
ARIES_OPTIONS+= axi-width=${AXIWidth}
ARIES_OPTIONS+= en-serial=${EN_SERIAL}

PIPELINE_OP=-{{pipeline_op}}
pass: ${PROJECT_PATH}/${FUNC}.adf.mlir
${PROJECT_PATH}/${FUNC}.adf.mlir: ${MLIR}.mlir
	aries-opt -o $@ $< \
			${PIPELINE_OP}="${ARIES_OPTIONS}"

ifeq ($(EN_PL),"true")
  ifeq ($(EN_AIE2),"false")
    ifeq ($(EN_Link), "true")
  	  translate: file_split clean_temp
  	else
  	  translate: file_split clean_temp kernel_file_split clean_kernel_vec
  	endif
  else
    # EN_AIE2 is not false
    translate:
  endif
else
  # EN_PL is not true
  translate:
endif

file_split: tempfile
	aries-opt <${MLIR}.mlir \
		-aries-file-split="inputfile-name=temp.cpp path-name=${PROJECT_AIE_PATH}/" \
		>/dev/null
tempfile: ${PROJECT_AIE_PATH}/temp.cpp
${PROJECT_AIE_PATH}/temp.cpp: ${PROJECT_PATH}/${FUNC}.adf.mlir
	aries-translate -o $@ $< \
		-emit-aries-kernels

copyfile:
ifeq ($(EN_PL), "true")
	@if [ -f ${PROJECT_AIE_PATH}/host.cpp ]; then mv ${PROJECT_AIE_PATH}/host.cpp ${PROJECT_Host_PATH}; fi
	@if [ -f ${PROJECT_AIE_PATH}/hls.cpp ]; then mv ${PROJECT_AIE_PATH}/hls.cpp ${PROJECT_PL_PATH}; fi
	@if [ -f ${PROJECT_AIE_PATH}/system.cfg ]; then mv ${PROJECT_AIE_PATH}/system.cfg ${PROJECT_PATH}; fi
endif

kernel_split: ${PROJECT_PATH}/${KERNEL_NAME}.mlir
${PROJECT_PATH}/${KERNEL_NAME}.mlir: ${PROJECT_PATH}/${FUNC}.adf.mlir
	aries-opt -o $@ $< \
		-aries-kernel-split

ifeq ($(AIEUnrollOpt), 0)
UNROLL_FLAG=--affine-loop-unroll="unroll-factor=$(AIEUnroll)" 
else
UNROLL_FLAG=--affine-loop-unroll="unroll-full unroll-full-threshold=$(AIEUnroll)"
endif

kernel_vec: ${PROJECT_PATH}/auto_${KERNEL_NAME}_aie.mlir
${PROJECT_PATH}/auto_${KERNEL_NAME}_aie.mlir: ${PROJECT_PATH}/${KERNEL_NAME}_vector.mlir
	aries-opt -o $@ $< \
		--aie-vectorize \
		-unaligned-loads-check=true \
		-canonicalize -cse
${PROJECT_PATH}/${KERNEL_NAME}_vector.mlir: ${PROJECT_PATH}/${KERNEL_NAME}_unroll.mlir
	aries-opt -o $@ $< \
		--affine-super-vectorize="virtual-vector-size=${AIEVector} vectorize-reductions" \
		--canonicalize
${PROJECT_PATH}/${KERNEL_NAME}_unroll.mlir: ${PROJECT_PATH}/${KERNEL_NAME}.mlir
	aries-opt -o $@ $< \
		${UNROLL_FLAG} \
		--canonicalize

kernel_file_split: kernel_cc
	aries-opt <${MLIR}.mlir \
		-aries-file-split="inputfile-name=temp.cc path-name=${PROJECT_AIE_PATH}/" \
		>/dev/null
kernel_cc: ${PROJECT_AIE_PATH}/temp.cc
${PROJECT_AIE_PATH}/temp.cc: ${PROJECT_PATH}/auto_${KERNEL_NAME}_aie.mlir
	aries-translate -o $@ $< \
		-emit-kenrel-func

clean_kernel_vec:
	rm -r ${PROJECT_PATH}/${KERNEL_NAME}_vector.mlir ${PROJECT_PATH}/${KERNEL_NAME}_unroll.mlir ${PROJECT_PATH}/${KERNEL_NAME}.mlir ${PROJECT_PATH}/auto_${KERNEL_NAME}_aie.mlir

clean_temp:
	rm -r ${PROJECT_AIE_PATH}/temp.cpp

clean_translate:
	rm -r ${PROJECT_AIE_PATH}/adf_graph.cpp ${PROJECT_AIE_PATH}/adf_kernel.h ${PROJECT_AIE_PATH}/adf_graph.h ${PROJECT_PATH}/kernel/hls.cpp ${PROJECT_PATH}/host/host.cpp ${PROJECT_PATH}/system.cfg

clean_pass:
	rm -r ${PROJECT_PATH}/${FUNC}.adf.mlir

clean: clean_pass clean_translate clean_temp clean_kernel_vec